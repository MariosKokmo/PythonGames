import random
import pygame
import math
import tkinter as tk
from tkinter import messagebox

# The cube class represents any cube that will be placed on the board
# i.e. the snake's body and the snacks (food) that the snake will be consuming
class cube(object):
    # number of rows on the grid
    rows = 20
    # the window height in pixels
    w = 500 
    def __init__(self,start,dirnx=1,dirny=0,color=(255,0,0)):
        self.pos = start
        self.dirnx = 1  # direction of x to the right
        self.dirny = 0
        self.color = color
    
    def move(self,dirnx,dirny):
        self.dirnx = dirnx  # set the cube's direction
        self.dirny= dirny
        # the new position of the cube with respect to the grid
        self.pos = (self.pos[0]+self.dirnx,self.pos[1]+self.dirny)
    
    def draw(self, surface, eyes=False):
        dis = self.w // self.rows
        i = self.pos[0] # i is row
        j = self.pos[1] # j is column
        
        pygame.draw.rect(surface, self.color, (i*dis+1,j*dis+1,dis-2, dis-2)) # we add something so that we do not cover the grid
        # draw the eyes as circles only on the head
        if eyes:
            center = dis//2
            radius = 3
            circleMiddle =(i*dis + center - radius, j*dis+8)
            circleMiddle2 =(i*dis + dis - radius*2, j*dis+8)
            pygame.draw.circle(surface,(0,0,0),circleMiddle,radius)
            pygame.draw.circle(surface,(0,0,0),circleMiddle2,radius)
    
class snake(object):
    body = []  # list of cubes
    turns = {}
    def __init__(self,color,pos):
        self.color=color
        self.head= cube(pos)
        self.body.append(self.head)
        self.dirnx = 0 # if one is -1 or 1 the other should be zero
        self.dirny = 0 # since the snake only moves in one direction each time
        
    def move(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
            
            keys = pygame.key.get_pressed()
            for key in keys:
                if keys[pygame.K_LEFT]:
                    self.dirnx = -1
                    self.dirny = 0
                    # we need to remember where we turned
                    # that means we have to remember the turn that the head made
                    # at every turn position
                    self.turns[self.head.pos[:]] = [self.dirnx,self.dirny] 
                
                elif keys[pygame.K_RIGHT]:
                    self.dirnx = 1
                    self.dirny = 0
                    self.turns[self.head.pos[:]] = [self.dirnx,self.dirny]
                
                elif keys[pygame.K_UP]:
                    self.dirnx = 0
                    self.dirny = -1
                    self.turns[self.head.pos[:]] = [self.dirnx,self.dirny]
                
                elif keys[pygame.K_DOWN]:
                    self.dirnx = 0
                    self.dirny = 1
                    self.turns[self.head.pos[:]] = [self.dirnx,self.dirny]
        
        for i, c in enumerate(self.body):
            p = c.pos[:] # position of the body's cube
            if p in self.turns:
                turn = self.turns[p]
                c.move(turn[0],turn[1])
                if i == len(self.body) -1: # in the last cube we remove the turn
                    self.turns.pop(p)
            else:
                if c.dirnx==-1 and c.pos[0] <=0: c.pos = (c.rows-1,c.pos[1]) # if cube goes out of screen we reset on the other side
                elif c.dirnx==1 and c.pos[0] >= c.rows-1: c.pos = (0,c.pos[1])
                elif c.dirny==1 and c.pos[1] >= c.rows-1 : c.pos = (c.pos[0],0)
                elif c.dirny==-1 and c.pos[1] <=0 : c.pos = (c.pos[0],c.rows-1)
                else: c.move(c.dirnx,c.dirny) # else we just move to the direction we already have
    
    
    def reset(self,pos):
        # reset the snake by setting the head as a cube at 
        # position = pos, erase the body and turns
        self.head= cube(pos)
        self.turns ={}
        self.body=[]
        self.body.append(self.head)
        self.dirnx = 0 
        self.dirny = 0       
    
    def addCube(self):
        tail = self.body[-1]
        dx, dy = tail.dirnx, tail.dirny
        
        # then we check what direction the tail is moving
        # so that we can correctly add the extension
        # towards the same direction
        
        if dx==1 and dy==0:
            self.body.append(cube((tail.pos[0]-1,tail.pos[1])))
        elif dx==-1 and dy==0:
            self.body.append(cube((tail.pos[0]+1,tail.pos[1])))
        elif dx==0 and dy==1:
            self.body.append(cube((tail.pos[0],tail.pos[1]-1)))
        elif dx==0 and dy==-1:
            self.body.append(cube((tail.pos[0],tail.pos[1]+1)))
        
        self.body[-1].dirnx = dx
        self.body[-1].dirny = dy
    
    def draw(self,surface):
        # draw the whole snake
        for i,c in enumerate(self.body):
            if i ==0:
                c.draw(surface,True) # the true is just for the head to draw eyes
            else:
                c.draw(surface)
        
        
def drawGrid(w, rows, surface):
    sizeBtwn = w // rows
    x=0
    y=0
    for l in range(rows):
        x += sizeBtwn
        y += sizeBtwn
        pygame.draw.line(surface, (255,255,255) ,(x,0),(x,w)) # draw white lines
        pygame.draw.line(surface, (255,255,255) ,(0,y),(w,y))
    
def redrawWindow(surface):
    global rows, width,s, snack
    surface.fill((0,0,0))
    s.draw(surface)
    snack.draw(surface)
    drawGrid(width,rows,surface)
    pygame.display.update()

def randomSnack(rows,item):
    positions = item.body # item is a snake. It eats a snack
    while True:
        x = random.randrange(rows)
        y = random.randrange(rows)
        if len(list(filter(lambda z:z.pos==(x,y),positions)))>0: #we make sure that we don't put a snack on the snake
            continue
        else:
            break
    return (x,y)
    
def message_box(subject,content):
    root = tk.Tk()
    root.attributes("-topmost",True) # the windo on top of every other
    root.withdraw()
    messagebox.showinfo(subject, content)
    try:
        root.destroy()
    except:
        pass
            
def main():
    global width, rows, s, snack
    width = 500
    height = 500
    rows = 20
    win = pygame.display.set_mode((width,height))
    s = snake((255,0,0), (10,10)) # red snake starts at 10,10
    snack = cube(randomSnack(rows, s),color=(0,255,0))
    flag = True
    clock = pygame.time.Clock()
    
    while flag:
        pygame.time.delay(50) # so that program does not run very fast
        clock.tick(10) # 10 fps
        s.move()
        if s.body[0].pos == snack.pos: # if snake eats snack, extend snake and create another one
            s.addCube()
            snack = cube(randomSnack(rows, s),color=(0,255,0))
        
        for x in range(len(s.body)):
            if s.body[x].pos in list(map(lambda z:z.pos,s.body[x+1:])):
                print('Score: ',len(s.body))
                message_box('You lost!','Please play again')
                s.reset((10,10))
                break
        redrawWindow(win)
        

main()
